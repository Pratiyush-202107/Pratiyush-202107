/*Program to simulate the various searching and sorting algorithms and compare their timings of a list of 1000 elements.
Pratiyush Kumar(202107)*/
#include <iostream>
#include <stdlib.h>
#include <time.h>
using namespace std;

void Linear_search(int arr[], int n, int x)
{
    clock_t start = clock();
    int flag = 1;
    for (int i = 0; i < n; i++)
    {
        if(arr[i] == x)
        {
            cout << "Element is present at: " << i << "th position" << endl;
            flag = 0;
            break;
        }
    }
    if(flag == 1)
        {cout << "Element is not present" << endl;}
    cout << fixed << "Execution time for Linear search: " << float(clock() - start)/CLOCKS_PER_SEC << endl;
}

void Binary_search(int arr[], int left, int right, int x)
{
    clock_t start = clock();
    int flag = 1;
    while(left <= right)
    {
        int mid = left + ((right - left)/2);

        if(arr[mid] == x)
        {
            cout << "After sorting, element is present at: " << mid << "th position" << endl;
            flag = 0;
            break;
        }
        if(arr[mid] < x)
            left = mid + 1;
        else
            right = mid - 1;
    }
    if(flag == 1)
    cout << "Element isn't present" << endl;

    cout << fixed << "Execution time for Binary search: " << float(clock() - start)/CLOCKS_PER_SEC << endl;
}

void swap(int &x, int &y)
{
    int temp = x;
    x = y;
    y = temp;
}

void Bubble_sort(int arr[], int n)
{
    clock_t start = clock();
    for (int i = 0; i < n-1; i++)
    {
        for (int j = 0; j < n-i-1; j++)
        {
            if(arr[j] > arr[j+1])
                {swap(arr[j], arr[j+1]);}
        }
    }
    cout << fixed << "Execution time for Bubble sort: " << float(clock() - start)/CLOCKS_PER_SEC << endl;
}

int partition(int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = low - 1;

    for(int j = low; j <= high - 1; j++)
    {
        if(arr[j] < pivot)
        {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i+1], arr[high]);
    return i+1;
}

void Quick_sort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pi = partition(arr, low, high);
        Quick_sort(arr, low, pi - 1);
        Quick_sort(arr, pi + 1, high);
    }
}

void print_array(int arr[], int size)
{
    for(int i = 0; i < size; i++)
        {cout << arr[i]<<" " ;}
}

int main()
{
    int array[1000], new_array[1000], element;
    for(int i = 0; i < 1000; i++)
        {array[i] = rand()%1000;}
    for(int i = 0; i < 1000; i++)
        {new_array[i] = array[i];}

    cout << "Array before sorting:" << endl;
    print_array(array, 1000);
    cout << "\n\nEnter an element to search: ";
    cin >> element;

    Linear_search(array, 1000, element);
    Bubble_sort(array, 1000);
    clock_t start = clock();
    Quick_sort(new_array, 0, 999);
    cout << fixed << "Execution time for Quick sort: " << float(clock() - start)/CLOCKS_PER_SEC << endl; 
    Binary_search(array, 0, 999, element);
    cout << "\nArray after sorting:" << endl;
    print_array(array, 1000);
    return 0;
}
