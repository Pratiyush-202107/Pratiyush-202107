/*Program to convert an infix expression into its postfix equivalent using stack operations.
Pratiyush Kumar (202107)*/
#include<iostream>
#include<stack>
using namespace std;

int precedence(char ch)
{
    if(ch == '+' || ch == '-')
        return 1;
    else if(ch == '*' || ch == '/')
        return 2;
    else if(ch == '^')
        return 3;
    else
        return 0;
}

string convert(string infix_form)
{
    stack<char> stk;
    stk.push('#');
    string postfix_form = "";
    string::iterator it;

    for(it = infix_form.begin(); it != infix_form.end(); it++)
    {
        if(isalnum(char(*it)))
            postfix_form += *it;
        else if(*it == '(')
            stk.push('(');
        else if(*it == '^')
            stk.push('^');
        else if(*it == ')')
        {
            while(stk.top() != '#' && stk.top() != '(')
            {
                postfix_form += stk.top();
                stk.pop();
            }
            stk.pop();
        }
        else
        {
            if(precedence(*it) > precedence(stk.top()))
                stk.push(*it);
            else
            {
                while(stk.top() != '#' && precedence(*it) <= precedence(stk.top()))
                {
                    postfix_form += stk.top();
                    stk.pop();
                }
                stk.push(*it);
            }
        }
    }

    while(stk.top() != '#')
    {
        postfix_form += stk.top();
        stk.pop();
    }

    return postfix_form;
}

int main()
{
    string infix_form;
    cout << "Enter the infix expression that you want to convert to postfix: ";
    cin >> infix_form;
    cout << "\nPostfix form for the given expression: " << convert(infix_form) << endl;
}
